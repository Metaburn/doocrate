service cloud.firestore {
  match /databases/{database}/documents {

    // This is root level admin
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/super_admins/$(request.auth.uid));
    }

    function isSpecificProjectAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)/projects/$(anyProject))
    }

    function isGuide() {
      return exists(/databases/$(database)/documents/guides/$(request.auth.uid));
    }

    function isCreator() {
      return resource.data.creator != null &&
      	(request.auth.uid == resource.data.creator.data.id || request.auth.uid == resource.data.creator.id);
    }

    function isUserAssignee() {
    	return resource.data.assignee != null &&
      	(request.auth.uid == resource.data.assignee.data.id || request.auth.uid == resource.data.assignee.id);
    }

    function isUserAssigneeOrCreator() {
    	return isCreator() || isUserAssignee();
    }

    function isTaskUnassigned() {
      return (request.resource.data.keys().hasAll(['assignee'])
      && !resource.data.keys().hasAll(['assignee']));
    }

    // Check that user is sending ONLY listeners as an Array and nothing more
    // This allows an auth user to update only the listeners field
    function isUserOnlySendingListeners() {
      return request.resource.data.keys().hasAll(['listeners']) && request.resource.size() == resource.size()
    }

    // Check that user is sending ONLY listeners as an Array and nothing more
    // This allows an auth user to update only the listeners field
    function isUserSendingOnlyListeners() {
      return request.resource.data.keys().hasAll(['listeners']) && request.resource.size() == resource.size()
    }

    // Allow create for anyone who is auth
    // Allow to update it the user is the project creator
    match /projects/{anyProject} {
      allow create: if request.auth != null;
      allow read: if true; //Allow all to read the existing project
      allow update: if request.auth != null && isCreator() || isSuperAdmin();
      allow delete: if request.auth != null && isCreator() || isSuperAdmin();

      match /tasks/{anyTask} {
        allow read: if request.auth != null;
        // Allow create: if authenticated
        // DONT EXPORT THE NEXT SENTENCE TO A FUNCTION - FIREBASE HAS A BUG THAT DOESNT ALLOW THAT TO WORK -
        // KEEP IT LIKE SO
        // Uncommment the canCreateTask will not allow users who already have tasks to create new tasks
        allow create: if request.auth != null // && ((get(/databases/$(database)/documents/projects/$(anyProject)).data.canCreateTask == true)
        // Uncomment the following to allow unassigned task to be assigned by all
        allow update: if request.auth != null && (isSpecificProjectAdmin() || isGuide() || isUserAssigneeOrCreator() || isTaskUnassigned() || isUserOnlySendingListeners() || isSuperAdmin());
        allow delete: if request.auth != null && (isSpecificProjectAdmin() || isCreator() || isSuperAdmin());
      }

      match /comments/{anyComment} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null && isCreator();
        allow delete: if request.auth != null && isCreator();
      }

      match /colors/{anyColor} {
        allow create: if request.auth != null;
        allow read: if request.auth != null;
        allow update: if request.auth != null && (isSpecificProjectAdmin() || isSuperAdmin());
        allow delete: if request.auth != null && (isSpecificProjectAdmin() || isSuperAdmin());
      }

      match /labels/{anyLabel} {
        allow create: if request.auth != null;
        allow read: if request.auth != null;
        allow update: if request.auth != null && (isSpecificProjectAdmin() || isSuperAdmin());
        allow delete: if request.auth != null && (isSpecificProjectAdmin() || isSuperAdmin());
      }
     }


    match /users/{userId} {
      allow read: if request.auth != null; // Auth users can read
      allow write: if userId == request.auth.uid || isSuperAdmin();
    }

    match /admins/{anyAdmin} {
      allow read: if request.auth != null;
      match /projects/{anyProject} {
        allow read: if request.auth != null;
      }
    }

    match /guides/{anyGuide} {
      allow read: if request.auth != null;
    }
  }
}
